{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "fSZjmb-DECqB",
        "dIxHA9rqEMFA",
        "ZBZ-xaVFMJTa"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Tasks\n",
        "\n",
        "* Threaded Voxelizer loader\n",
        "\n",
        "* Insert Latent feature data instead of Voxel data in All ML models and charts   \n",
        "\n",
        "* Data Set Visualization\n",
        "\n",
        "* Make folder of 20 custom 3d models\n",
        "\n",
        "* Map classification numbers to names"
      ],
      "metadata": {
        "id": "g4r-vrtSK7Y-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Notebooks\n",
        "\n",
        "\n",
        "1. Original training workflow\n",
        "2. Augmented data training workflow\n",
        "3. Utility functions and dataset visualizations\n",
        "4. Observations and charts of trained model\n",
        "\n"
      ],
      "metadata": {
        "id": "s80rW53aL605"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "VOAnTWz9MVmf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Prerequisites"
      ],
      "metadata": {
        "id": "fSZjmb-DECqB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Copied straight from the requirements.txt becuse idk how to do in colab :(\n",
        "!pip install git+https://github.com/omkar-mohanty/PyVoxelizer\n",
        "!pip install numpy>=1.12.1\n",
        "!pip install git+https://github.com/p-hofmann/MeshReader.git#egg=meshlib\n",
        "!pip install meshlib>=0.0.2\n",
        "!pip install matplotlib\n",
        "!pip install h5py"
      ],
      "metadata": {
        "id": "dHa0yVw-Ql2U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "wj_SomRxkNbT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Utils"
      ],
      "metadata": {
        "id": "dIxHA9rqEMFA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import voxlib.voxelize\n",
        "\"\"\"\n",
        "Voxelize function outputs (x,y,z) coordinates where the voxel exists, but we need the full dim * dim * dim 3D matrix.\n",
        "This function initializes a matrix of size dim * dim * dim then fills it up with all zeros first. Then loops over the filled voxel\n",
        "coordinates and puts 1.0 into them.\n",
        "\"\"\"\n",
        "def normvox(filename, dim):\n",
        "    coordinates = voxlib.voxelize.voxelize(filename, dim)\n",
        "\n",
        "    matrix_size = (dim, dim , dim)\n",
        "    matrix = [[[0.0 for _ in range(matrix_size[2])] for _ in range(matrix_size[1])] for _ in range(matrix_size[0])]\n",
        "\n",
        "    for coord in coordinates:\n",
        "\n",
        "      x, y, z = coord\n",
        "      \"Works for even dimensions only\"\n",
        "      x += int(dim/2) - 1\n",
        "      y += int(dim/2) - 1\n",
        "      z += int(dim/2) - 1\n",
        "      matrix[x][y][z] = 1.0\n",
        "\n",
        "    return matrix"
      ],
      "metadata": {
        "id": "FY9OGwoSnxpB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "The ML model expects the data to be in a 1D numpy array, but for our purposes we initially interpret the data as a 3D matrix.\n",
        "This code converts the 3D voxel matrix[dim][dim][dim] into flattened array[dim * dim * dim]\n",
        "\"\"\"\n",
        "def flatten_3d_mat(matrix, dim):\n",
        "  flattened_data = [0 for _ in range(dim * dim * dim)]\n",
        "  idx = 0\n",
        "  for x in range(dim):\n",
        "    for y in range(dim):\n",
        "      for z in range(dim):\n",
        "        flattened_data[idx] = matrix[x][y][z]\n",
        "        idx += 1\n",
        "  return flattened_data"
      ],
      "metadata": {
        "id": "pFi3R5FtRUyO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "def plot_voxel_grid(matrix):\n",
        "    fig = plt.figure()\n",
        "    ax = fig.add_subplot(111, projection='3d')\n",
        "    matrix = matrix.reshape(matrix.shape[1:4])\n",
        "    filled = matrix == 1.0  # This assumes that the matrix uses 1.0 for filled voxels\n",
        "    ax.voxels(filled, facecolors='blue', edgecolor='k')\n",
        "    plt.show()\n",
        "\n",
        "def plot_voxel_grid_rotate(matrix, axis='y', k=1):\n",
        "    fig = plt.figure()\n",
        "    ax = fig.add_subplot(111, projection='3d')\n",
        "    matrix = matrix.reshape(matrix.shape[1:4])\n",
        "\n",
        "    # Rotate the matrix\n",
        "    if axis == 'z':\n",
        "        matrix = np.rot90(matrix, k=k, axes=(0, 1))  # Rotate k times around z-axis (y-x plane)\n",
        "    elif axis == 'x':\n",
        "        matrix = np.rot90(matrix, k=k, axes=(1, 2))  # Rotate k times around x-axis (z-y plane)\n",
        "    elif axis == 'y':\n",
        "        matrix = np.rot90(matrix, k=k, axes=(0, 2))  # Rotate k times around y-axis (z-x plane)\n",
        "\n",
        "    filled = matrix == 1.0  # This assumes that the matrix uses 1.0 for filled voxels\n",
        "    ax.voxels(filled, facecolors='blue', edgecolor='k')\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "id": "wSdRde5x8FbA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def print_mat_ct_scan(matrix, dim):\n",
        "  for i in range(dim):\n",
        "      for j in range(dim):\n",
        "          for k in range(dim):\n",
        "              print(matrix[i][j][k], end=\" \")\n",
        "          print()\n",
        "      print()"
      ],
      "metadata": {
        "id": "WGWzRibrcVxS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Converts a h5py dataset np array into a 3d matrix generator of given dimensions\n",
        "\"\"\"\n",
        "import h5py\n",
        "def open_dataset_all(file_path, dim, data_type = 'train'):\n",
        "  data = h5py.File(file_path)\n",
        "  train_data = np.transpose(data[data_type])\n",
        "\n",
        "  data_map = {idx[0]: [] for idx in train_data }\n",
        "\n",
        "  for idx in range(0, len(train_data)):\n",
        "    data_point = train_data[idx]\n",
        "    single_vox = np.array(data_point[1:]).reshape((1, 30, 30, 30, 1)).astype('float32')\n",
        "    data_map[data_point[0]].append(single_vox)\n",
        "  return data_map\n",
        "\n",
        "\n",
        "def open_dataset(file_path, dim, data_type = 'train'):\n",
        "  data = h5py.File(file_path)\n",
        "  train = data[data_type]\n",
        "  transpose = np.transpose(train)\n",
        "\n",
        "  matrix_size = (dim, dim, dim)\n",
        "\n",
        "  # Initialize the 3D matrix with zeros\n",
        "  matrix = [[[0.0 for _ in range(matrix_size[2])] for _ in range(matrix_size[1])] for _ in range(matrix_size[0])]\n",
        "\n",
        "  for elem in range(0, len(transpose)):\n",
        "    indx = 0;\n",
        "    entry = transpose[elem][1:];\n",
        "    for i in range(matrix_size[0]):\n",
        "        for j in range(matrix_size[1]):\n",
        "            for k in range(matrix_size[2]):\n",
        "              matrix[i][j][k] = entry[indx]\n",
        "              indx += 1\n",
        "    yield matrix"
      ],
      "metadata": {
        "id": "6b3wFR_XkMsJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def dataset_dict(dataset_labels : list[str], offset = 0) -> dict:\n",
        "    return {key: float(index  + offset) for index, key in enumerate(dataset_labels)}\n",
        "print(dataset_dict([\"Fyre\", \"Leo\"], 1))"
      ],
      "metadata": {
        "id": "baNPJ_D1RHG6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Dataset Class"
      ],
      "metadata": {
        "id": "xOEwdLl5j_Gh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class DataSet:\n",
        "  def __init__(self, labels: list[str], file: str, dim = 30, data_type = 'train'):\n",
        "    self.data_map = open_dataset_all(file, dim, data_type)\n",
        "    self.label_map = dataset_dict(labels, 1)\n",
        "    self.dim = dim\n",
        "    self.data_type = data_type\n",
        "\n",
        "  def get_models_by_key(self, label: str):\n",
        "    idx = self.label_map[label]\n",
        "    return self.data_map[idx]\n",
        "\n",
        "  def get_models_by_id(self, id:float):\n",
        "    return self.data_map[id]"
      ],
      "metadata": {
        "id": "R_sdM4oUYTb1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "labels = ['bathtub', 'bed', 'chair', 'desk', 'dresser',\n",
        "               'monitor', 'night_stand', 'sofa', 'table', 'toilet']"
      ],
      "metadata": {
        "id": "qf4Jl4lWyWVT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = DataSet(labels, file = \"/content/drive/MyDrive/ModelNet10_res30_raw.mat\")"
      ],
      "metadata": {
        "id": "tDdDhUp2kFSd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "chairs = dataset.get_models_by_key('chair')"
      ],
      "metadata": {
        "id": "t7ICOwVvkoiM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bathtubs = dataset.get_models_by_key('bathtub')\n",
        "bathtubs_by_id = dataset.get_models_by_id(1.0)\n",
        "\n",
        "assert bathtubs_by_id == bathtubs"
      ],
      "metadata": {
        "id": "OS0fko33kcFt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "beds = dataset.get_models_by_key('bed')"
      ],
      "metadata": {
        "id": "4ifP3NWhkuVQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for idx in range(2):\n",
        "  plot_voxel_grid_rotate(bathtubs[idx])"
      ],
      "metadata": {
        "id": "t2cpHoInkXWl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# One From Each"
      ],
      "metadata": {
        "id": "xuGgAU64yP6U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for label in labels:\n",
        "  data = dataset.get_models_by_key(label)\n",
        "  print(\"Label : \" + label)\n",
        "  plot_voxel_grid_rotate(data[0])"
      ],
      "metadata": {
        "id": "cYAN7yG0yTSJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Preprocessing"
      ],
      "metadata": {
        "id": "UdPK6kpsUCOz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class VoxelModel:\n",
        "  \"\"\"\n",
        "    filename: Must end with .stl\n",
        "    dim: must be even\n",
        "  \"\"\"\n",
        "  def __init__(self, filename, dim):\n",
        "    self.mat = normvox(filename, dim)\n",
        "    self.dim = dim\n",
        "\n",
        "  def show_ct(self):\n",
        "    print_mat_ct_scan(self.mat)\n",
        "\n",
        "  def show_3d(self):\n",
        "    new_voxel = np.expand_dims(np.array(self.mat), axis=(0, -1)).astype('float32')\n",
        "    plot_voxel_grid_rotate(new_voxel)\n",
        "\n",
        "  def flattened(self):\n",
        "    return flatten_3d_mat(self.mat, self.dim)"
      ],
      "metadata": {
        "id": "fI6lNnNAUF4Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import threading\n",
        "\n",
        "\n",
        "def thread_vox(model_dir: str = \"/content/drive/MyDrive/Models\"):\n",
        "  lock = threading.Lock()\n",
        "\n",
        "  threads = []\n",
        "  models = []\n",
        "\n",
        "  def load_model(filename, dim):\n",
        "    try:\n",
        "      model = VoxelModel(filename, dim)\n",
        "      with lock:\n",
        "        models.append(model)\n",
        "    except Exception as e:\n",
        "      print(\"Load Error for \" + filename + e)\n",
        "\n",
        "  for file in os.listdir(model_dir):\n",
        "    if file.endswith(\".stl\"):\n",
        "      thread = threading.Thread(target = load_model, args = (model_dir +\"/\" + file, 30))\n",
        "      thread.start()\n",
        "      threads.append(thread)\n",
        "\n",
        "\n",
        "  for thread in threads:\n",
        "      thread.join()\n",
        "  return models"
      ],
      "metadata": {
        "id": "GUGBs18Xcxck"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "voxels = thread_vox(\"/content/drive/MyDrive/Models/Test\")\n",
        "print(len(voxels))"
      ],
      "metadata": {
        "id": "B-BJI63HQJ4U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for voxel in voxels:\n",
        "  voxel.show_3d()"
      ],
      "metadata": {
        "id": "RWXSEXepTBgK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "voxels = thread_vox()"
      ],
      "metadata": {
        "id": "OJJ10A54Jzmg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(voxels))"
      ],
      "metadata": {
        "id": "dmhA7ax5NQbq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for voxel in voxels:\n",
        "  voxel.show_3d()"
      ],
      "metadata": {
        "id": "zi4iZJO2J2bY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Dataset Visualization"
      ],
      "metadata": {
        "id": "ZBZ-xaVFMJTa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = open_dataset_all(\"/content/drive/MyDrive/ModelNet10_res30_raw.mat\", 30, data_type = 'train')\n"
      ],
      "metadata": {
        "id": "wZlDgjk_Mw_q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load dataset (modelnet10)\n",
        "file_path = '/content/drive/MyDrive/ModelNet10_res30_raw.mat'\n",
        "data = h5py.File(file_path, 'r')\n",
        "\n",
        "train_data = np.transpose(data['train'])\n",
        "test_data = np.transpose(data['test'])\n",
        "\n",
        "# single_data_point = train_data[369]\n",
        "\n",
        "# # Step 1: Preprocess the single data point\n",
        "# single_voxel = np.array(single_data_point[1:]).reshape((1, 30, 30, 30, 1)).astype('float32')\n",
        "# plot_voxel_grid3(single_voxel, axis = 'y')\n",
        "\n",
        "# for idx in range(0, len(train_data), 400):\n",
        "#   data_point = train_data[idx]\n",
        "#   print(data_point[0])\n",
        "#   single_vox = np.array(data_point[1:]).reshape((1, 30, 30, 30, 1)).astype('float32')\n",
        "#   plot_voxel_grid(single_vox)"
      ],
      "metadata": {
        "id": "w1BY0IwRGQaH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "map = {idx[0]: [] for idx in train_data}\n",
        "print(map)\n",
        "map = {idx[0]: [] for idx in test_data}\n",
        "print(map)"
      ],
      "metadata": {
        "id": "zh1k1fvieLnO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model = next(data)\n",
        "\n",
        "# print_mat_ct_scan(model, 30)"
      ],
      "metadata": {
        "id": "wxcQXs9gDOz7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(all_models)"
      ],
      "metadata": {
        "id": "FibFbF0AB8wQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "EV80jNa-OBny"
      }
    }
  ]
}